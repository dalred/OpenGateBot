import os
import re
import time
import asyncio
import pytz
import json, random
from datetime import datetime, timezone
from datetime import datetime, time as dtime
from datetime import datetime
from datetime import datetime, timedelta


from dotenv import load_dotenv
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
)
from telegram import ReplyKeyboardRemove
from telegram.error import NetworkError
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
import paho.mqtt.publish as publish
import paho.mqtt.client as mqtt
from typing import Optional

load_dotenv()
moscow = pytz.timezone("Europe/Moscow")
MIN_INTERVAL = timedelta(seconds=7)
last_used_time = {}
BOT_TOKEN = os.getenv("BOT_TOKEN")
SHEET_ID = os.getenv("SHEET_ID")
GOOGLE_CREDENTIALS_FILE = "credentials.json"
MQTT_USER = os.getenv("user_mosquitto")
MQTT_PASS = os.getenv("password_mosquitto")
HOST = os.getenv("HOST")
DOMAIN_IP = os.getenv("DOMAIN_IP")
MODE = os.getenv("MODE")


ASK_NAME, ASK_PHONE = range(2)


def log(msg):
    now = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    print(f"[{now}] {msg}")


async def is_too_soon(update, context) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ."""
    now = datetime.now()
    last_used = context.user_data.get("last_gate_call")

    if last_used and now - last_used < MIN_INTERVAL:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ {MIN_INTERVAL.total_seconds():.0f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π."
        )
        user_id = update.effective_user.id
        log(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: user_id={user_id}")
        return True

    context.user_data["last_gate_call"] = now
    return False


gate_state = {"current": "IDLE"}


async def is_gate_available_for_user(
    user_id: str, context: ContextTypes.DEFAULT_TYPE
) -> bool:
    last_user_id = context.bot_data.get("last_active_user_id")
    state = gate_state.get("current", "IDLE")

    if last_user_id and last_user_id != user_id and state != "IDLE":
        return False  # –ö–∞–ª–∏—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º
    return True  # –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ


def safe_gspread_call(func, *args, retries=3, delay=2, **kwargs):
    for attempt in range(1, retries + 1):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            log(f"[‚ö†Ô∏è] GSpread error ({attempt}/{retries}): {e}")
            time.sleep(delay)
    log(f"[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {func.__name__} –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫.")
    return None


def safe_get_all_records(sheet):
    return safe_gspread_call(sheet.get_all_records) or []


def on_disconnect(client, userdata, rc, properties):
    if rc != 0:
        log(f"[‚ö†Ô∏è] MQTT –æ—Ç–∫–ª—é—á–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ (rc={rc}) ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
        try:
            client.reconnect()
            log("[üîÅ] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            log(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
    else:
        log("[‚ÑπÔ∏è] MQTT –æ—Ç–∫–ª—é—á–∏–ª—Å—è –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –∫–ª–∏–µ–Ω—Ç–∞ (rc=0)")


def get_dynamic_keyboard(context, user_id=None):
    state = gate_state.get("current", "IDLE")
    last_user = context.bot_data.get("last_active_user_id")
    log(
        f"[üì≤] –ö–Ω–æ–ø–∫–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã: user_id={user_id}, state={state}, last_user={last_user}"
    )

    # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if user_id != last_user:
        log(f"[üîí] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º ‚Äî –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è")
        return None

    if state == "IDLE":
        log("[üéõÔ∏è] –û—Ç–¥–∞–µ–º –∫–Ω–æ–ø–∫—É: üö™ –û—Ç–∫—Ä—ã—Ç—å (IDLE)")
        return [["üö™ –û—Ç–∫—Ä—ã—Ç—å"]]
    elif state == "OPENING":
        log("[üéõÔ∏è] –û—Ç–¥–∞–µ–º –∫–Ω–æ–ø–∫—É: ‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        return [["‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"]]
    elif state == "STOPPED":
        log("[üéõÔ∏è] –û—Ç–¥–∞–µ–º –∫–Ω–æ–ø–∫—É: üîí –ó–∞–∫—Ä—ã—Ç—å")
        return [["üîí –ó–∞–∫—Ä—ã—Ç—å"]]
    elif state == "CLOSING":
        log("[üéõÔ∏è] –û—Ç–¥–∞–µ–º –∫–Ω–æ–ø–∫—É: ‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        return [["‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"]]
    else:
        log("[üéõÔ∏è] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–¥–∞–µ–º")
        return None


def on_mqtt_message(client, userdata, msg, properties=None):
    app = userdata["app"]
    context = userdata["context"]
    loop = app.bot_data.get("event_loop")

    try:
        payload_raw = msg.payload.decode()
        log(f"[MQTT] üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: topic={msg.topic}, payload={payload_raw}")

        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        try:
            data = json.loads(payload_raw)
            payload = data.get("command") or data.get("status") or payload_raw
        except json.JSONDecodeError as e:
            log(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON payload: {e}")
            return

        log(f"[MQTT] –°–æ—Å—Ç–æ—è–Ω–∏–µ: {payload}")

        user_id = data.get("user_id")
        username = data.get("username")
        if user_id:
            log(f"[MQTT] –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∏–∑ payload): {user_id}")
        else:
            log("[MQTT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ payload –Ω–µ —É–∫–∞–∑–∞–Ω")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        gate_state["current"] = payload

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if payload == "IDLE":
            context.bot_data["last_active_user_id"] = None
            log("[üîÅ] –°–±—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (IDLE)")
            log("[üîÅ] –ö–∞–ª–∏—Ç–∫–∞ –ø–µ—Ä–µ—à–ª–∞ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è")

            if user_id:
                keyboard = get_main_menu(status="yes", dynamic_buttons=None)
                text = "üîí"
            else:
                return  # –Ω–∏–∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º last_active_user_id
            if user_id:
                context.bot_data["last_active_user_id"] = user_id

            dynamic_buttons = get_dynamic_keyboard(context, user_id=user_id)
            keyboard = get_main_menu("yes", dynamic_buttons)

            text = {
                "OPENING": "üîì –ö–∞–ª–∏—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è",
                "CLOSING": "üîí –ö–∞–ª–∏—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è",
                "STOPPED": "‚èπ –ö–∞–ª–∏—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
            }.get(payload)

            if not text:
                return  # –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å

        # –ï–¥–∏–Ω—ã–π send_message
        future = asyncio.run_coroutine_threadsafe(
            app.bot.send_message(chat_id=user_id, text=text, reply_markup=keyboard),
            loop,
        )
        future.result(timeout=10)
        log(f"[‚úÖ] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={user_id}")

    except Exception as e:
        log(f"[‚ùå] –û—à–∏–±–∫–∞ –≤ on_mqtt_message: {e}")


def init_mqtt(application, context):
    context.bot_data["last_active_user_id"] = None
    client_id = f"client_{random.randint(1, 100000)}"
    client = mqtt.Client(client_id=client_id, protocol=mqtt.MQTTv5)
    client.username_pw_set(username=MQTT_USER, password=MQTT_PASS)
    client.user_data_set({"app": application, "context": context})
    client.on_message = on_mqtt_message
    client.on_disconnect = on_disconnect  # ‚¨ÖÔ∏è –í–ï–®–ê–ï–ú –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞

    try:
        client.connect(HOST, port=1883, keepalive=60)
    except Exception as e:
        log(f"[‚ùå] –û—à–∏–±–∫–∞ MQTT –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return

    client.subscribe("gate/status")
    log(f"[MQTT] –ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–∑–≤–∞–Ω–∞ (–≤ init_mqtt) ‚Üí client_id={client_id}")
    log("[MQTT] ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ gate/status –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    client.loop_start()


def send_gate_command(command: str, user_id: str, username: str) -> bool:
    if not MQTT_USER or not MQTT_PASS:
        log("‚ùå MQTT –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        return False

    payload = {
        "command": command,
        "user_id": user_id,
        "username": username,
        "timestamp": datetime.now(moscow).isoformat(),
    }

    try:
        publish.single(
            topic="gate/command",
            payload=json.dumps(payload),
            hostname=HOST,
            port=1883,
            auth={"username": MQTT_USER, "password": MQTT_PASS},
            qos=0,
            retain=False,
        )
        log(f"[üì§] MQTT: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {payload}")
        return True
    except Exception as e:
        print(f"[‚ùå] MQTT –æ—à–∏–±–∫–∞: {e}")
        return False


def get_access_time_for_user(user_id: str) -> Optional[str]:
    sheet = get_sheet()
    records = safe_get_all_records(sheet)
    for row in records:
        if str(row.get("user_id")) == user_id:
            return str(row.get("access_time", "")).strip().lower() or None
    return None  # –Ω–µ —É–∫–∞–∑–∞–Ω


def check_access_time(access_time_str: str) -> bool:
    tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(tz)
    current_day = now.strftime("%a").lower()  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'mon'
    current_time = now.time()

    if access_time_str.strip().lower() == "always":
        return True

    try:
        days_part, time_range = access_time_str.strip().split()
        start_str, end_str = time_range.split("-")
        start_time = datetime.strptime(start_str, "%H:%M").time()
        end_time = datetime.strptime(end_str, "%H:%M").time()

        # –†–∞—Å—à–∏—Ä—è–µ–º –¥–Ω–∏: 'mon-fri', 'sat', 'sun' –∏ —Ç.–ø.
        day_map = {
            "mon": 0,
            "tue": 1,
            "wed": 2,
            "thu": 3,
            "fri": 4,
            "sat": 5,
            "sun": 6,
            "weekdays": (0, 1, 2, 3, 4),
            "weekends": (5, 6),
        }

        allowed_days = set()
        for part in days_part.split(","):
            part = part.strip().lower()
            if part in ("weekdays", "weekends"):
                allowed_days.update(day_map[part])
            elif "-" in part:
                start_day, end_day = part.split("-")
                start_idx = day_map[start_day]
                end_idx = day_map[end_day]
                for i in range(start_idx, end_idx + 1):
                    allowed_days.add(i)
            elif part in day_map:
                allowed_days.add(day_map[part])

        today_idx = now.weekday()

        if today_idx in allowed_days:
            if start_time <= current_time <= end_time:
                return True
    except Exception as e:
        log(f"[‚ö†Ô∏è] –û—à–∏–±–∫–∞ –≤ access_time: {e}")

    return False


def normalize_phone(phone):
    return re.sub(r"\D", "", str(phone))[-10:] if phone else ""


def get_sheet(retries=3, delay=2):
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive",
    ]
    for attempt in range(1, retries + 1):
        try:
            creds = ServiceAccountCredentials.from_json_keyfile_name(
                GOOGLE_CREDENTIALS_FILE, scope
            )
            client = gspread.authorize(creds)
            return client.open_by_key(SHEET_ID).worksheet("AccessList")
        except Exception as e:
            log(f"[‚ö†Ô∏è] Google Sheets error ({attempt}/{retries}): {e}")
            time.sleep(delay)
    return None


def get_user_status(user_id: str) -> str:
    sheet = get_sheet()
    if not sheet:
        return "none"
    records = sheet.get_all_records()
    for row in records:
        if str(row.get("user_id")) == user_id:
            return row.get("aprove", "").strip().lower() or "none"
    return "none"


def get_main_menu(status: str = "none", dynamic_buttons=None):
    keyboard = []

    if status == "yes":
        if dynamic_buttons is not None and len(dynamic_buttons) > 0:
            keyboard.append(dynamic_buttons[0])
        else:
            keyboard.append(["üö™ –û—Ç–∫—Ä—ã—Ç—å"])  # fallback —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ

        keyboard.append(["üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä"])
        keyboard.append(["‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üèÅ –ù–∞—á–∞–ª–æ"])

    elif status == "no":
        keyboard = [["üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üèÅ –ù–∞—á–∞–ª–æ"]]

    elif status == "pending":
        keyboard = [["üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üèÅ –ù–∞—á–∞–ª–æ"]]

    else:
        keyboard = [
            ["üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"],
            ["üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üèÅ –ù–∞—á–∞–ª–æ"],
        ]

    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def safe_reply(message, text, retries=3, delay=2, **kwargs):
    for attempt in range(retries):
        try:
            return await message.reply_text(text, **kwargs)
        except NetworkError as e:
            log(f"[‚ö†Ô∏è] NetworkError ({attempt+1}/{retries}): {type(e).__name__} ‚Äî {e}")
            await asyncio.sleep(delay)
    log("[‚ùå] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–æ–≤.")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    name = user.first_name or user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    log(f"[üîÑ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω (start): {user_id}")

    status = "none"
    sheet = get_sheet()
    if sheet:
        records = sheet.get_all_records()
        for row in records:
            if str(row.get("user_id")) == user_id:
                status = row.get("aprove", "").strip().lower()
                break

    await safe_reply(
        update.message,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(status),
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_reply(
        update.message,
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å\nüìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\nüîÅ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä\nüîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n‚ÑπÔ∏è –ü–æ–º–æ—â—å ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ",
    )


async def help_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_reply(
        update.message,
        "‚ÑπÔ∏è –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n@DanielPython",
    )


async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é –∏ –ò–º—è:",
        reply_markup=ReplyKeyboardRemove(),  # ‚¨ÖÔ∏è –°–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    return ASK_NAME


async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["fio"] = update.message.text.strip()
    button = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    keyboard = ReplyKeyboardMarkup(
        [[button]], resize_keyboard=True, one_time_keyboard=True
    )
    await safe_reply(
        update.message, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard
    )
    return ASK_PHONE


async def change_phone_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["change_mode"] = True
    button = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä", request_contact=True)
    keyboard = ReplyKeyboardMarkup(
        [[button]], resize_keyboard=True, one_time_keyboard=True
    )
    await safe_reply(update.message, "‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä:", reply_markup=keyboard)
    return ASK_PHONE


async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    sheet = get_sheet()
    if not sheet:
        await safe_reply(update.message, "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ.")
        return ConversationHandler.END

    contact = update.message.contact
    text = update.message.text
    user_id = str(user.id)
    phone = None

    if contact and contact.phone_number:
        phone = contact.phone_number
    elif text and re.fullmatch(r"\+?\d{10,15}", text.strip()):
        phone = text.strip()
    else:
        await safe_reply(
            update.message, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É."
        )
        return ASK_PHONE

    phone = normalize_phone(phone)
    records = sheet.get_all_records()

    # === –°–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ ===
    if context.user_data.get("change_mode"):
        for i, row in enumerate(records, start=2):
            if str(row.get("user_id")) == user_id:
                old_phone = normalize_phone(row.get("phone", ""))
                if phone == old_phone:
                    log(
                        f"[üîÅ] {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–æ—Ç –∂–µ –Ω–æ–º–µ—Ä ({phone}), —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω—ë–Ω"
                    )
                    status = get_user_status(user_id)
                    await safe_reply(
                        update.message,
                        "‚ÑπÔ∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–æ—Ç –∂–µ –Ω–æ–º–µ—Ä. –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ.",
                        reply_markup=get_main_menu(status),
                    )
                    return ConversationHandler.END

                sheet.update_cell(i, 4, phone)
                sheet.update_cell(i, 5, "pending")
                log(f"[üîÅ] {user_id} —Å–º–µ–Ω–∏–ª –Ω–æ–º–µ—Ä –Ω–∞ {phone}, —Å—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω")
                status = get_user_status(user_id)
                await safe_reply(
                    update.message,
                    "‚úÖ –ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.",
                    reply_markup=get_main_menu(status),
                )
                return ConversationHandler.END

        await safe_reply(
            update.message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        )
        return ConversationHandler.END

    # === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω user_id) ===
    for row in records:
        if str(row.get("user_id")) == user_id:
            log(
                f"[‚ÑπÔ∏è] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_id}, phone: {phone}"
            )
            await safe_reply(
                update.message,
                "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
                reply_markup=get_main_menu(),
            )
            return ConversationHandler.END

    fio = context.user_data.get("fio", "")
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    telegram_link = f"https://t.me/{user.username}" if user.username else ""
    sheet.append_row(
        [
            user_id,
            user.username or "",
            fio,
            phone,
            "pending",
            "sat 08:00-19:00",
            timestamp,
            telegram_link,
        ],
        value_input_option="USER_ENTERED",
    )
    log(f"[üìã] –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {user_id}: {fio}, {phone}")
    context.user_data["is_registering"] = False
    # üëá –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    admin_chat_id = int(os.getenv("ADMIN_CHAT_ID"))
    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{user_id}"
                ),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}"),
                InlineKeyboardButton("üïì –û—Å—Ç–∞–≤–∏—Ç—å –≤ –æ–∂–∏–¥–∞–Ω–∏–∏", callback_data="pending"),
            ]
        ]
    )

    await context.bot.send_message(
        chat_id=admin_chat_id,
        text=(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *{fio}* (`{user_id}`) –ø—Ä–æ—Å–∏—Ç –¥–æ—Å—Ç—É–ø\n"
            f"üîó [–ü—Ä–æ—Ñ–∏–ª—å](https://t.me/{user.username})"
        ),
        reply_markup=keyboard,
        parse_mode="Markdown",
    )

    # ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await safe_reply(
        update.message,
        "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.",
        reply_markup=get_main_menu("pending"),
    )
    return ConversationHandler.END


async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_name = str(update.effective_user.username)
    sheet = get_sheet()
    if not sheet:
        await safe_reply(update.message, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ.")
        return

    records = sheet.get_all_records()
    for row in records:
        if str(row.get("user_id")) == user_id:
            status = row.get("aprove", "").strip().lower()
            if status == "yes":
                log(
                    f"[‚úÖ] –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω ‚Äî user_id: {user_id}, phone: {row.get('phone', '')}"
                )
                await safe_reply(
                    update.message,
                    "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.",
                    reply_markup=get_main_menu("yes"),
                )
            elif status == "no":
                log(
                    f"[‚ùå] –û—Ç–∫–ª–æ–Ω–µ–Ω–æ ‚Äî user_id: {user_id}, phone: {row.get('phone', '')}, username: {row.get('username', '')}"
                )
                await safe_reply(
                    update.message,
                    "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @DanielPython",
                    reply_markup=get_main_menu("no"),
                )
            else:  # pending
                log(f"[‚è≥] –ó–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è ‚Äî user_id: {user_id}")
                await safe_reply(
                    update.message,
                    "‚è≥ –ó–∞—è–≤–∫–∞ –µ—â—ë —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è.",
                    reply_markup=get_main_menu("pending"),
                )
            return

    log(f"‚ÑπÔ∏è user_id={user_id}, {user_name} –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É.")
    await safe_reply(update.message, "‚ÑπÔ∏è –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É.")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_reply(update.message, "üö´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


async def unknown_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await safe_reply(update.message, "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")


async def my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(
        f"–í–∞—à `chat_id`: `{chat_id}`", parse_mode="Markdown"
    )


async def open_gate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    username = user.username or "unknown"

    if await is_too_soon(update, context):
        return

    if not await is_gate_access_granted(user_id, update):
        return
    else:
        log(f"[üîì] –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: user_id={user_id}, username={user.username}")

    access_time = get_access_time_for_user(user_id)

    if not access_time or not check_access_time(access_time):
        log(
            f"[‚è∞] –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–∏—Ç–∫–µ –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–∏: user_id={user_id},username={user.username} access_time={access_time}"
        )
        await safe_reply(
            update.message,
            "üïí –î–æ—Å—Ç—É–ø –∫ –∫–∞–ª–∏—Ç–∫–µ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
        )
        return
    else:
        log(
            f"[üîì] –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: user_id={user_id}, username={user.username} time is OK"
        )

    log(f"[üÜó] –ù–∞–∑–Ω–∞—á–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")

    # ‚õî –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É–∂–µ –¥—Ä—É–≥–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not await is_gate_available_for_user(user_id, context):
        await update.message.reply_text(
            "üö´ –ö–∞–ª–∏—Ç–∫–∞ —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
        )
        return

    # üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    send_gate_command("OPEN", user_id, username)
    log(f"[üîì] –ö–∞–ª–∏—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: user_id={user.id}, username={user.username}")

    # ‚è≥ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
    await update.message.reply_text(
        "üì§ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∫–∞–ª–∏—Ç–∫–∏..."
    )


async def stop_gate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    username = user.username or "unknown"

    if await is_too_soon(update, context):
        return

    if not await is_gate_access_granted(user_id, update):
        return

    access_time = get_access_time_for_user(user_id)

    if not access_time or not check_access_time(access_time):
        log(
            f"[‚è∞] –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–∏—Ç–∫–µ –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–∏: user_id={user_id},username={user.username} access_time={access_time}"
        )
        await safe_reply(
            update.message,
            "üïí –î–æ—Å—Ç—É–ø –∫ –∫–∞–ª–∏—Ç–∫–µ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
        )
        return
    else:
        log(
            f"[üîì] –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: user_id={user_id}, username={user.username} time is OK"
        )

    if not await is_gate_available_for_user(user_id, context):
        await update.message.reply_text(
            "üö´ –ö–∞–ª–∏—Ç–∫–∞ —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
        )
        return

    send_gate_command("STOP", user_id, username)

    dynamic_buttons = get_dynamic_keyboard(context, user_id=user_id)
    keyboard = get_main_menu("yes", dynamic_buttons)

    await update.message.reply_text(
        "üì§ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∫–∞–ª–∏—Ç–∫–∏...",
        reply_markup=keyboard,
    )


async def close_gate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    username = user.username or "unknown"

    if await is_too_soon(update, context):
        return

    if not await is_gate_access_granted(user_id, update):
        return

    access_time = get_access_time_for_user(user_id)

    if not access_time or not check_access_time(access_time):
        log(
            f"[‚è∞] –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–∏—Ç–∫–µ –≤–Ω–µ –≤—Ä–µ–º–µ–Ω–∏: user_id={user_id},username={user.username} access_time={access_time}"
        )
        await safe_reply(
            update.message,
            "üïí –î–æ—Å—Ç—É–ø –∫ –∫–∞–ª–∏—Ç–∫–µ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
        )
        return
    else:
        log(
            f"[üîì] –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: user_id={user_id}, username={user.username} time is OK"
        )

    if not await is_gate_available_for_user(user_id, context):
        await update.message.reply_text(
            "üö´ –ö–∞–ª–∏—Ç–∫–∞ —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
        )
        return

    send_gate_command("CLOSE", user_id, username)

    dynamic_buttons = get_dynamic_keyboard(context, user_id=user_id)
    keyboard = get_main_menu("yes", dynamic_buttons)

    await update.message.reply_text(
        "üì§ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –∫–∞–ª–∏—Ç–∫–∏...",
        reply_markup=keyboard,
    )


async def notify_admin_about_request(
    user_id: str, fio: str, username: str, context: ContextTypes.DEFAULT_TYPE
):
    admin_chat_id = int(os.getenv("ADMIN_CHAT_ID", "YOUR_CHAT_ID"))

    link = f"https://t.me/{username}" if username else "–Ω–µ—Ç —Å—Å—ã–ª–∫–∏"
    text = (
        f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø:\n\n"
        f"üë§ –§–ò–û: {fio}\n"
        f"üÜî user_id: {user_id}\n"
        f"üîó –ü—Ä–æ—Ñ–∏–ª—å: {link}\n\n"
        f"üïí –°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"
    )

    keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve:{user_id}"
                ),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}"),
            ]
        ]
    )

    await context.bot.send_message(
        chat_id=admin_chat_id, text=text, reply_markup=keyboard, parse_mode="HTML"
    )


async def handle_admin_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    sheet = get_sheet()
    if not sheet:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ.")
        return

    if ":" not in data:
        await query.edit_message_text("‚ÑπÔ∏è –†–µ—à–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ.")
        return

    action, user_id = data.split(":", 1)
    records = sheet.get_all_records()

    for i, row in enumerate(records, start=2):
        if str(row.get("user_id")) == user_id:
            fio = row.get("fio", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            username = row.get("username", "")
            mention = f"@{username}" if username else f"user_id={user_id}"

            if action == "approve":
                safe_update_cell(sheet, i, 5, "yes")
                log(f"[‚úÖ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω ‚Äî {fio} ({mention})")
                await query.edit_message_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fio} ({mention}) –æ–¥–æ–±—Ä–µ–Ω."
                )
                await context.bot.send_message(
                    chat_id=int(user_id),
                    text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                    reply_markup=get_main_menu("yes"),
                )
            elif action == "reject":
                safe_update_cell(sheet, i, 5, "no")
                log(f"[‚ùå] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚Äî {fio} ({mention})")
                await query.edit_message_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fio} ({mention}) –æ—Ç–∫–ª–æ–Ω—ë–Ω."
                )
            return
    await query.edit_message_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.")


async def is_gate_access_granted(user_id: str, update: Update) -> bool:
    sheet = get_sheet()
    if not sheet:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ.")
        return False

    records = sheet.get_all_records()
    for row in records:
        if str(row.get("user_id")) == user_id:
            status = row.get("aprove", "").strip().lower()
            if status == "yes":
                return True
            elif status == "no":
                await update.message.reply_text("üö´ –í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
                return False
            else:
                await update.message.reply_text("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –µ—â—ë —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è.")
                return False

    await update.message.reply_text("üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    return False


async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.bot_data["event_loop"] = asyncio.get_event_loop()

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"), register_start),
            MessageHandler(filters.Regex("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä"), change_phone_start),
        ],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_PHONE: [
                MessageHandler(filters.CONTACT, ask_phone),
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(handle_admin_decision))
    app.add_handler(CommandHandler("myid", my_id))
    app.add_handler(MessageHandler(filters.Regex("üèÅ –ù–∞—á–∞–ª–æ"), start))
    app.add_handler(
        MessageHandler(filters.Regex("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"), check_status)
    )  # ‚¨ÖÔ∏è —Å—é–¥–∞
    app.add_handler(MessageHandler(filters.Regex("‚ÑπÔ∏è –ü–æ–º–æ—â—å"), help_button))
    app.add_handler(MessageHandler(filters.Regex("üö™ –û—Ç–∫—Ä—ã—Ç—å"), open_gate))
    app.add_handler(MessageHandler(filters.Regex("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"), stop_gate))
    app.add_handler(MessageHandler(filters.Regex("üîí –ó–∞–∫—Ä—ã—Ç—å"), close_gate))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_input))

    if MODE == "webhook":
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤ WEBHOOK —Ä–µ–∂–∏–º–µ. –í–≤–µ–¥–∏—Ç–µ /start –≤ Telegram.")

        PORT = int(os.getenv("PORT", 8443))
        webhook_url = f"https://{DOMAIN_IP}:{PORT}/bot{BOT_TOKEN}"

        init_mqtt(app, app)
        await app.bot.set_webhook(webhook_url)

        await app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=webhook_url,
            cert="certs/webhook.crt",
            key="certs/webhook.key",
            url_path=f"bot{BOT_TOKEN}",
        )
    else:
        log("üöÄ –ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ. –í–≤–µ–¥–∏—Ç–µ /start –≤ Telegram.")
        init_mqtt(app, app)
        await app.run_polling()


if __name__ == "__main__":
    import nest_asyncio

    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
